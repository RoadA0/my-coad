#define _CRT_SECURE_NO_WARNINGS 1

#include<stdio.h>
#include<string.h>
void reserve(char*left,char*right)
{
	while (left < right)
	{
		char tmp = *left;
		*left = *right;
		*right = tmp;
		left++;
		right--;
	}



}
void left_move1(char*arr, int k)//左旋方案1
{
	int i;
	char*zero = arr;
	char*ret = arr;
	for (i = 0; i < k; i++)
	{
		ret = zero;
		arr = zero;
		//取第一个
		char tmp = *arr;
		//依次前推
		while (*ret++ = *++arr);
	//	把第一个放在最后一个
		*--ret = tmp;
	}
}
//左旋方案2
void left_move2(char*arr,int k,int sz)
{

	reserve(arr, arr + k - 1);//左旋前半部分，
	reserve(arr + k, arr + sz - 2);//左旋后半部分
	reserve(arr, arr + sz - 2);//左旋整体



}
int is_move(char*str11, char*str22)
{
	int len1 = strlen(str11);
	int len2 = strlen(str22);
	if (len1!=len2)
		return 0;
	strncat(str11, str11, 6);
	int*ret = strstr(str11, str22);
	if (ret == NULL)
		ret = 0;
	else
		ret = 1;
	return ret;

}
int Findnum(int arr[5][5], int num, int* x, int* y)
{
	int row = 5;
	int col = 5;
	*x = 0;
	*y = col - 1;
	if (arr[0][0] > num || arr[row - 1][col - 1] < num)
		return 0;
	while (*x<row&&*y>=0)
	{
		if (arr[*x][*y] < num)
			(*x)++;
		else if (arr[*x][*y]>num)
			(*y)--;
		else
			return 1;
	}

	return 0;

}
int main()
{//左旋问题
	/*int k;
	scanf("%d", &k);
	char arr[] = {'a','b','c','d','e','f','g','\0'};
	int sz = sizeof(arr) / sizeof(arr[1]);
	left_move2(arr, k,sz);
	printf("%s \n", arr);

*/



	//  判断一个字符串是否为另一个字符串旋转而来的
	/*char str11[20] = "abcdefg";
	char str22 [20]= "cdefgab";
	int ret = is_move(str11, str22);
	if (ret == 1)
		printf("YES\n");
	else
		printf("NO\n");
*/

	//在杨氏矩阵中查找某个数字是否存在
	int arr[5][5] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 };
	int num;
	int x=0, y=0;
	scanf("%d", &num);
	int ret = Findnum(arr, num,&x,&y);
	if (ret == 0)
		printf("找不到这个数字\n");
	else
		printf("这个数字的下标是\n %d %d\n", x+1, y+1);




	return 0;
}






